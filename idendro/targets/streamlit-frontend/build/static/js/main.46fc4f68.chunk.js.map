{"version":3,"sources":["index.tsx"],"names":["Orientation","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","dendrogram","args","scaleType","show_nodes","dimensions","height","width","margin","top","right","bottom","left","innerHeight","innerWidth","orientation","label_margin","xScale","yScale","plot","d3","remove","append","attr","create_container","scales","scale_type","label_range","label_axis_func","value_axis_func","label_limits","x_domain","value_limits","y_domain","value_range","label_axis_transform","value_axis_transform","labelScale","valueScale","label_axis_pos","axis_labels","map","x","label_axis_label","label","labelAxisGenerator","domain","range","tickValues","tickFormat","d","i","tickSize","label_axis","call","labelAngle","anchor","sign","selectAll","Math","abs","style","constant","valueAxisGenerator","create_axis","links","forEach","link","y","nodes","node","link_container","enter","fillcolor","strokewidth","strokeopacity","strokedash","draw_links","node_container","elem","tooltip","on","e","target","this","mouseover","hovertext","html","Object","entries","nodeName","radius","mousemove","mouseleave","click","setComponentValue","edgecolor","opacity","text","labelcolor","labelsize","draw_nodes","setFrameHeight","setComponentReady"],"mappings":"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","file":"static/js/main.46fc4f68.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport * as d3 from 'd3'\nimport './idendro.css'\n\ninterface AxisLabel {\n    x: number\n    label: string    \n    labelAngle: number\n}\n\ninterface Coord {\n    x: number\n    y: number\n}\n\ninterface ClusterLink {\n    x: number[]\n    y: number[]\n    fillcolor: string\n    id: number\n    children_id: number[]\n    cluster_id: number\n    strokewidth: number\n    strokedash: number[]\n    strokeopacity: number    \n    data: Coord[]\n}\n\ninterface ClusterNode {\n    x: number\n    y: number\n    type: string\n    id: number\n    cluster_id: number | null\n    edgecolor: string\n    label: string\n    hovertext: Object\n    fillcolor: string\n    radius: number\n    opacity: number\n    labelsize: number\n    labelcolor: string\n}\n\ninterface Dendrogram {\n    axis_labels: AxisLabel[]\n    links: ClusterLink[]\n    nodes: ClusterNode[]\n    x_domain: [number, number]\n    y_domain: [number, number]\n}\n\ninterface Dimensions {\n    margin: Margin\n    height: number\n    width: number\n    innerHeight: number\n    innerWidth: number,\n    orientation: Orientation\n}\n\nenum Orientation {\n    top = \"top\",\n    bottom = \"bottom\",\n    right = \"right\",\n    left = \"left\"\n}\n\ninterface Margin {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\ninterface plot extends d3.Selection<SVGGElement, unknown, HTMLElement, any> { }\n\ninterface scaleLinear extends d3.ScaleLinear<number, number, never> { }\n\ninterface scaleSymLog extends d3.ScaleSymLog<number, number, number | undefined> { }\n\ninterface scaleLog extends d3.ScaleLogarithmic<number, number, never> {}\n\nfunction create_container(dimensions: Dimensions): plot {\n\n\n    if (d3.select(\"#idendro\")) {\n        d3.select(\"#idendro\").remove()\n    }\n    // append svg element to the body of the page\n    // set dimensions and position of the svg element\n    let svg = d3\n        .select(\"body\")\n        .append(\"svg\")\n        .attr(\"id\", \"idendro\")\n        .attr(\"width\", dimensions.width)\n        .attr(\"height\", dimensions.height)\n\n    let plot = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\")\n        .attr(\"id\", \"idendro-container\");\n\n    return plot\n}\n\nfunction create_axis(plot: plot, dimensions: Dimensions, dendrogram: Dendrogram, scale_type: string) {\n\n    let label_limits = dendrogram.x_domain\n    let value_limits = dendrogram.y_domain\n\n    let label_range, value_range = [0, 0]\n    let label_axis_func, value_axis_func: CallableFunction\n    let label_axis_transform = [0, 0]\n    let value_axis_transform = [0, 0]\n\n    //handle orientation impact on scale ranges & positioning\n    if (dimensions.orientation === Orientation.top || dimensions.orientation === Orientation.bottom) {\n        label_range = [0, dimensions.innerWidth]\n        value_axis_func = d3.axisLeft\n        value_axis_transform = [0, 0]\n        if (dimensions.orientation === Orientation.top) {\n            value_range = [dimensions.innerHeight, 0]\n            label_axis_func = d3.axisBottom\n            label_axis_transform = [0, dimensions.innerHeight]\n        } else {\n            value_range = [0, dimensions.innerHeight]\n            label_axis_func = d3.axisTop\n        }\n    } else {\n        value_axis_func = d3.axisBottom\n        label_range = [dimensions.innerHeight, 0]\n        value_axis_transform = [0, dimensions.innerHeight]\n        if (dimensions.orientation === Orientation.left) {\n            value_range = [dimensions.innerWidth, 0]\n            label_axis_func = d3.axisRight\n            label_axis_transform = [dimensions.innerWidth, 0]\n        } else {\n            value_range = [0, dimensions.innerWidth]\n            label_axis_func = d3.axisLeft\n        }\n    }\n\n    //get label-axis positions and labels\n    let label_axis_pos = dendrogram.axis_labels.map((x) => x.x)\n    let label_axis_label = dendrogram.axis_labels.map((x) => x.label)\n\n    //create label-axis\n    let labelScale: scaleLinear | scaleLog | scaleSymLog\n    labelScale = d3.scaleLinear()\n        .domain(label_limits).range(label_range)\n\n    let labelAxisGenerator = label_axis_func(labelScale)\n        .tickValues(label_axis_pos)\n        .tickFormat((d, i) => label_axis_label[i])\n        .tickSize(3)      \n        \n    let label_axis  = plot.append(\"g\")\n    .attr(\"id\", \"label-axis\")\n    .attr(\"transform\", \"translate(\" + label_axis_transform[0] + \",\" + label_axis_transform[1] + \")\")        \n    .call(labelAxisGenerator)\n\n    //handle label position angles\n    let labelAngle = dendrogram.axis_labels[0].labelAngle\n    let anchor = 'start'\n    let sign = 1\n    if (labelAngle < 0) {\n        anchor = 'end'\n        sign = -1\n    }\n    \n    label_axis.selectAll(\"text\")\n        .attr(\"transform\", \"rotate(\" + labelAngle + \")\")\n        .attr(\"y\", Math.abs(sign * 90 - labelAngle) / 7)\n        .attr(\"x\", labelAngle / 5)\n        .attr(\"dy\", \".5em\")\n        .style(\"text-anchor\", anchor);\n\n    //create value-axis\n    let valueScale: scaleLinear | scaleLog | scaleSymLog\n\n    if (scale_type === 'symlog') {\n        valueScale = d3.scaleSymlog().constant(1)\n    } else if (scale_type === 'log') {\n        valueScale = d3.scaleLog()\n    } else {\n        valueScale = d3.scaleLinear()\n    }\n\n    valueScale.domain(value_limits)\n    valueScale.range(value_range)\n\n\n    let valueAxisGenerator = value_axis_func(valueScale)\n\n    plot.append(\"g\")\n        .attr(\"id\", \"value-axis\")\n        .attr(\"transform\", \"translate(\" + value_axis_transform[0] + \",\" + value_axis_transform[1] + \")\")\n        .call(valueAxisGenerator)\n\n\n    return [labelScale, valueScale]\n}\n\nfunction draw_links(link_container: plot, links: ClusterLink[], xScale: scaleLinear | scaleLog | scaleSymLog, yScale: scaleLinear | scaleLog | scaleSymLog) {\n\n    link_container.selectAll(\".link\")\n        .data(links)\n        .enter()\n        .append(\"path\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", (d) => d.fillcolor) \n        .attr(\"stroke-width\", (d) => d.strokewidth)  \n        .attr(\"stroke-opacity\", (d) => d.strokeopacity)\n        .attr(\"stroke-dasharray\", (d) => d.strokedash)     \n        .attr(\"class\", \"link\")\n        .attr(\"d\", function (d) {\n            return d3.line<Coord>()\n                .x((d) => xScale(d.x) || 0)\n                .y((d) => yScale(d.y) || 0)\n                (d.data)\n        })\n\n}\n\nfunction draw_nodes(node_container: plot, nodes: ClusterNode[], xScale: scaleLinear | scaleLog | scaleSymLog, yScale: scaleLinear | scaleLog | scaleSymLog) {\n\n    let elem = node_container.selectAll(\".node\")\n        .data(nodes)\n        .enter()\n        .append(\"g\")\n        .attr(\"transform\", function (d) { return \"translate(\" + xScale(d.x) + \",\" + yScale(d.y) + \")\" })\n        .attr(\"class\", \"node\")\n\n    let tooltip = d3.select(\"body\")\n        .append(\"div\")\n        .style(\"opacity\", 0)\n        .attr(\"class\", \"idendro-tooltip\")        \n    .on(\"mouseover\", function(this: HTMLElement, e: MouseEvent, d) {        \n        if (e.target) { \n            d3.select(this).style(\"opacity\", 1) \n        }            \n    })\n    .on(\"mouseleave\", function(this: HTMLElement, e: MouseEvent, d) {\n        if (e.target) { \n            d3.select(this).style(\"opacity\", 0) \n            d3.select(this).style(\"display\", \"none\") \n        }\n    })\n\n    let mouseover = function (this: SVGCircleElement | SVGTextElement, e: MouseEvent, d: ClusterNode) {\n        tooltip.style(\"opacity\", 1)\n        tooltip.style(\"display\", \"initial\")\n\n        if (typeof(d.hovertext) === 'string') {\n            tooltip.html(d.hovertext)\n        } else {\n            let hovertext: string = \"\"\n            for (const [key, value] of Object.entries(d.hovertext)) {\n                hovertext += \"<strong>\"+ key + \"</strong>: \" + value + \"<br>\"\n            }\n            tooltip.html(hovertext)                        \n        }\n        \n        if (this.nodeName === 'circle') {\n            d3.select(this).attr(\"r\", d.radius * 1.5)\n        }\n    }\n\n    let mousemove = function (this: SVGCircleElement | SVGTextElement, e: MouseEvent, d: ClusterNode) {\n        tooltip            \n            .style(\"left\", e.x + \"px\")\n            .style(\"top\", e.y + \"px\")\n        if (this.nodeName === 'circle') {\n            d3.select(this).attr(\"r\", d.radius * 1.5)\n        }\n    }\n\n\n    let mouseleave = function (this: SVGCircleElement | SVGTextElement, e: MouseEvent, d: ClusterNode) {\n        tooltip\n            .style(\"opacity\", 0)\n        if (this.nodeName === 'circle') {\n            d3.select(this).attr(\"r\", d.radius)\n        }\n    }\n\n    let click = function (this: SVGCircleElement | SVGTextElement, e: MouseEvent, d: ClusterNode) {\n        Streamlit.setComponentValue(d)\n    }\n\n    elem.append(\"circle\")\n        .attr(\"fill\", (d) => d.fillcolor)\n        .attr(\"stroke\", (d) => d.edgecolor)        \n        .attr('r', (d) => d.radius)\n        .attr(\"opacity\", (d) => d.opacity)\n        .on(\"mouseover\", mouseover)\n        .on(\"mouseleave\", mouseleave)\n        .on(\"mousemove\", mousemove)\n        .on(\"click\", click)\n\n\n    elem.append(\"text\")        \n        .text((d) => d.label)\n        .attr(\"fill\", (d) => d.labelcolor)\n        .attr(\"font-size\", (d) => d.labelsize)        \n        .attr(\"opacity\", (d) => d.opacity)\n        .on(\"mouseover\", mouseover)\n        .on(\"mouseleave\", mouseleave)\n        .on(\"mousemove\", mousemove)\n        .on(\"click\", click)\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n    // Get the RenderData from the event\n    const data = (event as CustomEvent<RenderData>).detail\n\n    //initialize variables as appropriate\n    let dendrogram: Dendrogram = data.args['dendrogram']\n    let scaleType: string = data.args['scale']\n    let show_nodes: Boolean = data.args['show_nodes']    \n    let margin: Margin = { top: 50, right: 50, bottom: 50, left: 50 }\n    let label_margin_size = 200\n    let dimensions: Dimensions = {\n        height: data.args['height'],\n        width: data.args['width'],\n        margin: margin,\n        innerHeight: 0,\n        innerWidth: 0,\n        orientation: data.args['orientation']\n    }\n\n    let margin_map = { 'top': Orientation.bottom, 'bottom': Orientation.top, 'left': Orientation.right, 'right': Orientation.left }\n    let label_margin: Orientation = margin_map[dimensions.orientation]\n\n    dimensions.margin[label_margin] = label_margin_size\n    dimensions.innerHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom\n    dimensions.innerWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right\n\n    //create the plot container and the axes\n    let plot = create_container(dimensions)\n    let scales = create_axis(plot, dimensions, dendrogram, scaleType)\n\n    let xScale: scaleLinear | scaleLog | scaleSymLog\n    let yScale: scaleLinear | scaleLog | scaleSymLog\n\n    //depending on the orientation, remap X and Y values\n    if (dimensions.orientation === Orientation.top || dimensions.orientation === Orientation.bottom) {\n        xScale = scales[0]\n        yScale = scales[1]\n        dendrogram.links.forEach(link => {\n            link.data = link.x.map(function (x, i) { return { 'x': x, 'y': link.y[i] } })\n        });\n    } else {\n        yScale = scales[0]\n        xScale = scales[1]\n        dendrogram.links.forEach(link => {\n            link.data = link.x.map(function (x, i) { return { 'y': x, 'x': link.y[i] } })\n        });\n        dendrogram.nodes.forEach(node => {\n            let x = node.x\n            node.x = node.y\n            node.y = x\n        });\n    }\n\n    //draw links\n    let link_container = plot.append('g').attr(\"class\", \"link-container\")\n    draw_links(link_container, dendrogram.links, xScale, yScale)\n\n    //draw nodes\n    if (show_nodes) {\n        let node_container = plot.append('g').attr(\"class\", \"node-container\")\n        draw_nodes(node_container, dendrogram.nodes, xScale, yScale)\n    }\n    \n    \n    Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}